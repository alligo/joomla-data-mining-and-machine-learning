#!/usr/bin/env python3
#===============================================================================
#
#          FILE:  nginxlogs2csv
#
#         USAGE:  nginxlogs2csv -i access.log
#
#   DESCRIPTION:  
#
#       OPTIONS:  ---
#
#  REQUIREMENTS:  - python3
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Emerson Rocha <rocha[at]alligo.com.br>
#       COMPANY:  Alligo
#       LICENSE:  Public Domain dedication
#                 SPDX-License-Identifier: Unlicense
#       VERSION:  v1.1
#       CREATED:  2021-01-24 01:25 UTC
#      REVISION:  2021-01-24 02:52 UTC changed from POSIX shell script to python3
#===============================================================================

# TODO: change documentation style, see https://realpython.com/documenting-python-code/ (fititnt, 2021-01-24 02:54 UTC)

import sys, os, gzip, getopt, re

# This line in special may need customization for your needs.
# @see https://codereview.stackexchange.com/questions/238232/regex-for-nginx-log-parser
# @see https://gist.github.com/hreeder/f1ffe1408d296ce0591d
# @see https://www.programmersought.com/article/7703577076/
lineformat = re.compile(r"""(?P<ipaddress>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) - - \[(?P<dateandtime>\d{2}\/[a-z]{3}\/\d{4}:\d{2}:\d{2}:\d{2} (\+|\-)\d{4})\] ((\"(GET|POST) )(?P<url>.+)(http\/1\.1")) (?P<statuscode>\d{3}) (?P<bytessent>\d+) (?P<refferer>-|"([^"]+)") (["](?P<useragent>[^"]+)["])""", re.IGNORECASE)


def usage():
    print("Usage:  \n  nginxlogs2csv -i /var/log/nginx/access.log  \n  nginxlogs2csv -i /var/log/nginx/ \n  nginxlogs2csv -i /var/log/nginx/access.log > /tmp/access.log.csv")


def parse_file(input_file):
    print ('TODO.... [', input_file, ']')

    if input_file.endswith(".gz"):
        logfile = gzip.open(input_file)
        lines = logfile.readlines()
    else:
        logfile = open(input_file)
        lines = logfile.readlines()

    # print(logfile)
    # print(lines)

    # for line in lines:
    #     print(line)

    for line in lines:
        data = re.search(lineformat, line)
        # data = re.search(lineformat, l.decode())

        print(data)
        if data:
            datadict = data.groupdict()
            ip = datadict["ipaddress"]
            datetimestring = datadict["dateandtime"]
            url = datadict["url"]
            bytessent = datadict["bytessent"]
            referrer = datadict["refferer"]
            useragent = datadict["useragent"]
            status = datadict["statuscode"]
            method = data.group(6)

            print (ip, \
                datetimestring, \
                url, \
                bytessent, \
                referrer, \
                useragent, \
                status, \
                method)

    # print(logfile)

    logfile.close()


    # # # Using readlines() 
    # try:
    #     file1 = open(input_file, 'r') 
    #     Lines = file1.readlines()
    # except (OSError, IOError, FileNotFoundError) as e:
    #     usage()
    #     print(e)
    #     sys.exit(2)

    # file1 = open(input_file, 'r') 
    # Lines = file1.readlines()
    
    # count = 0
    # # Strips the newline character 
    # for line in Lines: 
    #     print("Line{}: {}".format(count, line.strip())) 

def parse_input_argument(input_argument):
    if os.path.isdir(input_argument):
        for f in os.listdir(input_argument):
            parse_file(f)
    else:
        parse_file(input_argument)


def main(argv):
   input_argument = ''
   # outputfile = ''
   try:
        opts, args = getopt.getopt(argv,"hi:o:",["input=","output="])
   except getopt.GetoptError:
        usage
        sys.exit(2)
   for opt, arg in opts:
        if opt == '-h' or opt == '--help':
            usage
            sys.exit()
        elif opt in ("-i", "--input"):
            input_argument = arg

   # print ('The source file/directory is [', input_argument, ']')

   parse_input_argument(input_argument)

if __name__ == "__main__":
    main(sys.argv[1:])
